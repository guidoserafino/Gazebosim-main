!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
GazeboInterface	gazebo_interface.cpp	/^GazeboInterface::GazeboInterface(){}$/;"	f	class:GazeboInterface
GazeboInterface	gazebo_interface.hpp	/^class GazeboInterface {$/;"	c
MAX_TIME_DIFF	main.cpp	14;"	d	file:
PORT	net_protocol.cpp	13;"	d	file:
__GAZEBO_INTERFACE__	gazebo_interface.hpp	2;"	d
_angle	gazebo_interface.hpp	/^		std::vector<double> _pose = {0,0,0}, _angle = {0,0,0};$/;"	m	class:GazeboInterface
_angle_magnetic	gazebo_interface.hpp	/^		double _angle_magnetic;$/;"	m	class:GazeboInterface
_distance	gazebo_interface.hpp	/^		unsigned int _world_reference = 0, _distance=0;$/;"	m	class:GazeboInterface
_frame	gazebo_interface.hpp	/^		cv::Mat _frame;$/;"	m	class:GazeboInterface
_imu	gazebo_interface.hpp	/^		std::vector<double> _imu={0,0,0,0,0,0,0};$/;"	m	class:GazeboInterface
_pose	gazebo_interface.hpp	/^		std::vector<double> _pose = {0,0,0}, _angle = {0,0,0};$/;"	m	class:GazeboInterface
_sim_time	gazebo_interface.hpp	/^		timestamp_t _sim_time;$/;"	m	class:GazeboInterface
_world_reference	gazebo_interface.hpp	/^		unsigned int _world_reference = 0, _distance=0;$/;"	m	class:GazeboInterface
cb_angle	gazebo_interface.cpp	/^void GazeboInterface::cb_angle(ConstVector3dPtr &msg){$/;"	f	class:GazeboInterface
cb_angle_magnetic	gazebo_interface.cpp	/^void GazeboInterface::cb_angle_magnetic(ConstMagnetometerPtr &msg){$/;"	f	class:GazeboInterface
cb_distance	gazebo_interface.cpp	/^void GazeboInterface::cb_distance(ConstLaserScanStampedPtr &msg) {$/;"	f	class:GazeboInterface
cb_img	gazebo_interface.cpp	/^void GazeboInterface::cb_img(ConstImageStampedPtr &msg) {$/;"	f	class:GazeboInterface
cb_imu	gazebo_interface.cpp	/^void GazeboInterface::cb_imu(ConstIMUPtr &msg){$/;"	f	class:GazeboInterface
cb_pose	gazebo_interface.cpp	/^void GazeboInterface::cb_pose(ConstVector3dPtr &msg){$/;"	f	class:GazeboInterface
chrono_to_timestamp	main.cpp	/^timestamp_t chrono_to_timestamp( std::chrono::duration<long int,std::ratio<1, 1000000000>> t){$/;"	f
getImage	gazebo_interface.cpp	/^cv::Mat GazeboInterface::getImage(){$/;"	f	class:GazeboInterface
get_angle	gazebo_interface.cpp	/^double GazeboInterface::get_angle(){$/;"	f	class:GazeboInterface
get_distance	gazebo_interface.cpp	/^unsigned int GazeboInterface::get_distance(){$/;"	f	class:GazeboInterface
get_imu	gazebo_interface.cpp	/^std::vector<double> GazeboInterface::get_imu(){$/;"	f	class:GazeboInterface
get_sim_time	gazebo_interface.cpp	/^timestamp_t GazeboInterface::get_sim_time(){$/;"	f	class:GazeboInterface
get_true_yaw	gazebo_interface.cpp	/^double GazeboInterface::get_true_yaw(){$/;"	f	class:GazeboInterface
init	gazebo_interface.cpp	/^void GazeboInterface::init(bool verbose, std::string suffix){$/;"	f	class:GazeboInterface
main	main.cpp	/^int main(int argc, char const *argv[]) { $/;"	f
nsec	gazebo_interface.hpp	/^	long int nsec;$/;"	m	struct:timestamp_t
pause_simulation	gazebo_interface.cpp	/^void GazeboInterface::pause_simulation(){$/;"	f	class:GazeboInterface
pub_ang	gazebo_interface.hpp	/^		gazebo::transport::PublisherPtr pub_vel, pub_ang, pub_world, pub_phys;$/;"	m	class:GazeboInterface
pub_phys	gazebo_interface.hpp	/^		gazebo::transport::PublisherPtr pub_vel, pub_ang, pub_world, pub_phys;$/;"	m	class:GazeboInterface
pub_vel	gazebo_interface.hpp	/^		gazebo::transport::PublisherPtr pub_vel, pub_ang, pub_world, pub_phys;$/;"	m	class:GazeboInterface
pub_world	gazebo_interface.hpp	/^		gazebo::transport::PublisherPtr pub_vel, pub_ang, pub_world, pub_phys;$/;"	m	class:GazeboInterface
quit_listener	gazebo_interface.cpp	/^void GazeboInterface::quit_listener() {$/;"	f	class:GazeboInterface
rcv_msg	net_protocol.cpp	/^std::string rcv_msg(int sock){$/;"	f
resume_simulation	gazebo_interface.cpp	/^void GazeboInterface::resume_simulation(){$/;"	f	class:GazeboInterface
sec	gazebo_interface.hpp	/^	long int sec;$/;"	m	struct:timestamp_t
send_image	main.cpp	/^void send_image(int sock, cv::Mat img){$/;"	f
send_message	net_protocol.cpp	/^void send_message(int sock, std::string msg){$/;"	f
set_angular_velocity	gazebo_interface.cpp	/^void GazeboInterface::set_angular_velocity(std::vector<double> v){$/;"	f	class:GazeboInterface
set_linear_velocity	gazebo_interface.cpp	/^void GazeboInterface::set_linear_velocity(std::vector<double> v){$/;"	f	class:GazeboInterface
set_object_frame	gazebo_interface.cpp	/^void GazeboInterface::set_object_frame(){$/;"	f	class:GazeboInterface
set_sim_speed	gazebo_interface.cpp	/^void GazeboInterface::set_sim_speed(int real_time_percentage){$/;"	f	class:GazeboInterface
set_world_frame	gazebo_interface.cpp	/^void GazeboInterface::set_world_frame(){$/;"	f	class:GazeboInterface
string_to_vect3d	net_protocol.cpp	/^std::vector<double> string_to_vect3d(std::string str){$/;"	f
sub_dist	gazebo_interface.hpp	/^			sub_dist,$/;"	m	class:GazeboInterface
sub_img	gazebo_interface.hpp	/^		gazebo::transport::SubscriberPtr sub_img,$/;"	m	class:GazeboInterface
sub_imu	gazebo_interface.hpp	/^			sub_imu;$/;"	m	class:GazeboInterface
sub_mag	gazebo_interface.hpp	/^			sub_mag,$/;"	m	class:GazeboInterface
sub_pos	gazebo_interface.hpp	/^			sub_pos,$/;"	m	class:GazeboInterface
sub_rot	gazebo_interface.hpp	/^			sub_rot,$/;"	m	class:GazeboInterface
timestamp_diff	main.cpp	/^long long timestamp_diff(timestamp_t t1, timestamp_t t2){$/;"	f
timestamp_t	gazebo_interface.hpp	/^struct timestamp_t {$/;"	s
timestamp_t	gazebo_interface.hpp	/^typedef struct timestamp_t timestamp_t;$/;"	t	typeref:struct:timestamp_t
vect_to_string	net_protocol.cpp	/^std::string vect_to_string(std::vector<double> vec){$/;"	f
wait_ack	net_protocol.cpp	/^void wait_ack(int sock_fd){$/;"	f
